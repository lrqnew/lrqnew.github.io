(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{504:function(t,a,s){"use strict";s.r(a);var r=s(4),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("Boxx"),t._v(" "),s("h2",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("h3",{attrs:{id:"什么是"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("计算机中描述一个字符串中字符出现规律的规则")]),t._v(" "),s("h3",{attrs:{id:"为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么"}},[t._v("#")]),t._v(" 为什么")]),t._v(" "),s("p",[t._v("因为计算机不懂人类的词汇的规则，所以需要人教计算机认识人类语言中词汇的规则：手机号，身份证号，车牌号。。。")]),t._v(" "),s("h3",{attrs:{id:"何时使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时使用"}},[t._v("#")]),t._v(" 何时使用")]),t._v(" "),s("h4",{attrs:{id:"_2种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2种"}},[t._v("#")]),t._v(" 2种")]),t._v(" "),s("ol",[s("li",[t._v("验证输入的字符串格式")]),t._v(" "),s("li",[t._v("在字符串中查找敏感词时")])]),t._v(" "),s("h3",{attrs:{id:"如何使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[t._v("#")]),t._v(" 如何使用")]),t._v(" "),s("h4",{attrs:{id:"最简单的规则其实就是敏感词原文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最简单的规则其实就是敏感词原文"}},[t._v("#")]),t._v(" 最简单的规则其实就是敏感词原文：")]),t._v(" "),s("p",[t._v("比如: 我草")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("规定")]),t._v(" "),s("p",[t._v("必须是2个字"),s("br"),t._v("\n第一个字必须是我"),s("br"),t._v("\n第二个字必须是草")])]),t._v(" "),s("p",[t._v("问题: 只要敏感词一变，就找不到了！")]),t._v(" "),s("h4",{attrs:{id:"字符集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符集"}},[t._v("#")]),t._v(" 字符集:")]),t._v(" "),s("p",[t._v("什么是：描述一位字符上多个备选字的集合"),s("br"),t._v("\n何时：如果敏感词中一位字符有多种备选字的可能时。"),s("br"),t._v("\n如何: [备选字列表]"),s("br"),t._v("\n比如: 想匹配多种草字: 草，艹，操，槽"),s("br"),t._v("\n[草艹操槽]")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("强调")]),t._v(" "),s("p",[t._v("字和字之间不要带任何分隔符！")])]),t._v(" "),s("p",[t._v("效果: 多个字每次选其一匹配"),s("br"),t._v("\n简写：如果备选字列表中部分字符是连续的"),s("br"),t._v("\n比如: 一位数字：[0123456789]"),s("br"),t._v("\n一位大写字母: [ABC...]"),s("br"),t._v('\n可用-省略中间字符，-读作"到"')]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("重要的简写")]),t._v(" "),s("p",[t._v("一位数字：[0-9]"),s("br"),t._v("\n一位大写字母: [A-Z]"),s("br"),t._v("\n一位小写字母:[a-z]"),s("br"),t._v("\n一位字母：[A-Za-z]"),s("br"),t._v("\n不能是[A-z]"),s("br"),t._v("\n因为在ASCII表中，大写字母和小写字母不连续。A-Z: 65~90  []_`  a-z:97~122。选择范围大于字母的范围。可能错选。"),s("br"),t._v("\n一位字母或数字: [0-9A-Za-z]"),s("br"),t._v("\n一位汉字: [\\u4e00-\\u9fa5]")])]),t._v(" "),s("h4",{attrs:{id:"预定义字符集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预定义字符集"}},[t._v("#")]),t._v(" 预定义字符集:")]),t._v(" "),s("p",[t._v("什么是: 对常用的字符集提供的更简化写法"),s("br"),t._v("\n包括:"),s("br"),t._v("\n一位数字： \\d   等效于   [0-9]"),s("br"),t._v("\n一位字母、数字或_:"),s("br"),t._v("\n\\w  等效于  [0-9A-Za-z_]"),s("br"),t._v("\n一位空字符：\\s 可匹配:"),s("br"),t._v("\n空格、制表符Tab等一切看不见的空字符"),s("br"),t._v("\n所有文字（通配符）： .")]),t._v(" "),s("h4",{attrs:{id:"数量词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数量词"}},[t._v("#")]),t._v(" 数量词:")]),t._v(" "),s("p",[t._v("什么是: 专门定义一个字符集出现次数的规则"),s("br"),t._v("\n何时: 只要一个字符集可能出现多次，都要用量词修饰。"),s("br"),t._v("\n如何: 2大类：")]),t._v(" "),s("ol",[s("li",[t._v("有明确数量边界:"),s("br"),t._v("\n字符集{5}  必须重复出现5次"),s("br"),t._v("\n字符集{4,6}  4次到6次"),s("br"),t._v("\n字符集{6,}   6次以上，多了不限")]),t._v(" "),s("li",[t._v("没有明确数量边界："),s("br"),t._v("\n字符集*   可有可无，多了不限"),s("br"),t._v("\n字符集?   可有可无，最多一次"),s("br"),t._v("\n字符集+   至少一个，多了不限")]),t._v(" "),s("li",[t._v("选择:"),s("br"),t._v("\n什么是: 在多个子规则选其一匹配即可"),s("br"),t._v("\n何时: 如果希望在多个子规则中选其一匹配时，就用选择。"),s("br"),t._v("\n如何: 子规则1 | 子规则2"),s("br"),t._v("\n或"),s("br"),t._v("\n意思: 要么选择左边的子规则1匹配，要么选择右边的子规则2匹配")]),t._v(" "),s("li",[t._v("分组:"),s("br"),t._v("\n什么是: 将多个规则分为一组先匹配，再和分组外的规则联合匹配。"),s("br"),t._v("\n何时: 希望多个规则局部先匹配，再和外部组合时。"),s("br"),t._v("\n如何: (多个规则)"),s("br"),t._v("\n贪婪模式 和 |"),s("br"),t._v("\n默认情况: 正则表达式都是采用贪婪模式匹配尽量长的满足规则的字符串"),s("br"),t._v("\n比如: 只想匹配4位或6位数字的验证码，不想匹配五位的数字。"),s("br"),t._v("\n\\d{4}(\\d{2})?"),s("br"),t._v("\n先固定4位,后两位整体可有可无最多一次"),s("br"),t._v("\n但是: |不遵守贪婪模式，会按顺序优先匹配。一旦前一个规则匹配上了，就算后一个规则也匹配，也不再执行。"),s("br"),t._v("\n比如: \\d{4}|\\d{6} 几乎永远只能匹配4位，无法匹配6位。因为即使是六位数字也会先匹配\\d{4}，而导致后边的\\d{6}不再起作用。"),s("br"),t._v("\n如果非用或，也要颠倒位置: \\d{6}|\\d{4}")]),t._v(" "),s("li",[t._v("特殊位置:"),s("br"),t._v("\n三个位置: 字符串开头^，字符串结尾$，单词边界\\b"),s("br"),t._v("\n何时: 如果不想匹配全部，而是只想匹配指定位置上的敏感词时，才用特殊位置。"),s("br"),t._v("\n比如: 开头的空字符: ^\\s+"),s("br"),t._v("\n结尾的空字符：\\s+$"),s("br"),t._v("\n开头或结尾的空字符: ^\\s+|\\s+$"),s("br"),t._v("\n单词边界: \\b[a-z]")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("强调")]),t._v(" "),s("p",[t._v("\\b等于空格吗？等于标点符号吗？"),s("br"),t._v("\n都不等于。"),s("br"),t._v("\n\\b是一个位置，不是字符，不等于空格和标点符号。")])]),t._v(" "),s("h2",{attrs:{id:"string提供的正则函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string提供的正则函数"}},[t._v("#")]),t._v(" String提供的正则函数")]),t._v(" "),s("h3",{attrs:{id:"查找敏感词-4种不同场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找敏感词-4种不同场景"}},[t._v("#")]),t._v(" 查找敏感词——4种不同场景")]),t._v(" "),s("h4",{attrs:{id:"_1-在字符串中查找一个固定的敏感词出现的位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-在字符串中查找一个固定的敏感词出现的位置"}},[t._v("#")]),t._v(" 1. 在字符串中查找一个固定的敏感词出现的位置：")]),t._v(" "),s("p",[t._v('var i=str.indexOf("敏感词",fromi)'),s("br"),t._v("\n位置<的<敏感词"),s("br"),t._v('\n在str中，从fromi位置向后，找下一个"敏感词"的位置。'),s("br"),t._v("\n返回值: 如果找到，返回敏感词第一个字的位置i。"),s("br"),t._v("\n如果没找到返回-1.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("问题")]),t._v(" "),s("p",[t._v("只能查找一个写死的固定的敏感词。一旦敏感词有任何稍微的修改，都会导致查找不到。")])]),t._v(" "),s("h4",{attrs:{id:"_2-用正则表达式查找多种敏感词的位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-用正则表达式查找多种敏感词的位置"}},[t._v("#")]),t._v(" 2. 用正则表达式查找多种敏感词的位置")]),t._v(" "),s("p",[t._v("var i=str.search(/正则/i)")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("问题")]),t._v(" "),s("p",[t._v("只能获得位置，无法获得敏感词的内容")])]),t._v(" "),s("h4",{attrs:{id:"_3-查找敏感词的内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-查找敏感词的内容"}},[t._v("#")]),t._v(" 3. 查找敏感词的内容:")]),t._v(" "),s("p",[t._v("var arr=str.match(/正则/i)"),s("br"),t._v("\n在str中查找符合正则表达式要求的敏感词，返回其内容和位置。"),s("br"),t._v("\n返回值:"),s("br"),t._v("\n如果找到，返回一个数组arr:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Tables")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Are")]),t._v(" "),s("th",{staticStyle:{"text-align":"right"}},[t._v("Cool")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v('"index"')])]),t._v(" "),s("tr",[s("td",[t._v('"敏感词"')]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("位置i")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("本质")]),t._v(" "),s("p",[t._v('无论是0，还是index其实都是房间号（下标）。访问时都是用[下标]。只不过数字不加""，而字符串下标要加""。')])]),t._v(" "),s("p",[t._v("如果想获得本次找到的敏感词内容:"),s("br"),t._v("\narr[0]"),s("br"),t._v("\n如果想获得本地找到的敏感词的位置:"),s("br"),t._v('\narr["index"]  可简写为 arr.index'),s("br"),t._v('\n在运行时，arr.index会被自动翻译为["index"]')]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("强调")]),t._v(" "),s("p",[t._v('必须加""，如果不加，index就变成变量，而在全局没有名为index的变量，就会报错。'),s("br"),t._v("\n如果没找到，返回null ——重大隐患"),s("br"),t._v("\nnull和undefined之后什么都不能跟，比如: 不能加. 不能加()，只要加就报错。"),s("br"),t._v("\n所以，今后，只要碰上可能返回null的函数，都要先判断不是null，再使用。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("问题")]),t._v(" "),s("p",[t._v("只能查找一个敏感词，就下班了！"),s("br"),t._v("\n解决: 正则还有一个后缀g, 意为global全部"),s("br"),t._v("\n如果正则加了g，就不能只找一个，而是必须找完所有才能下班。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("坑")]),t._v(" "),s("p",[t._v("一旦match中的正则加了后缀g，返回值就会有巨大变化:"),s("br"),t._v("\n如果找到，还是返回数组，只不过数组中就不包含敏感词的位置了，而仅包含多个敏感词的列表："),s("br"),t._v('\n["敏感词1","敏感词2","敏感词3",...]'),s("br"),t._v("\n0        1         2")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("问题")]),t._v(" "),s("p",[t._v("不加g，只能找一个，但是有位置"),s("br"),t._v("\n加g，可找所有，但是没有位置了")])]),t._v(" "),s("h4",{attrs:{id:"_4-即查找每个关键词的内容-又查找每个关键词的位置。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-即查找每个关键词的内容-又查找每个关键词的位置。"}},[t._v("#")]),t._v(" 4. 即查找每个关键词的内容，又查找每个关键词的位置。")]),t._v(" "),s("p",[t._v("String自己做不了，依靠下午将的regexp对象")]),t._v(" "),s("h3",{attrs:{id:"替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#替换"}},[t._v("#")]),t._v(" 替换")]),t._v(" "),s("h4",{attrs:{id:"_1-简单替换-将所有敏感词都替换为统一的新值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单替换-将所有敏感词都替换为统一的新值"}},[t._v("#")]),t._v(" 1. 简单替换: 将所有敏感词都替换为统一的新值")]),t._v(" "),s("p",[t._v('str=str.replace(/正则/ig,"新值")'),s("br"),t._v('\n将str中所有符合正则要求的敏感词都替换为一致的"新值"')]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("坑")]),t._v(" "),s("p",[t._v("字符串都是不可变类型。一旦创建，内容就无法修改了。所有对字符串的修改，都无权直接修改原字符串。只能返回新字符串。所以，必须自己用=赋值的方返回的新字符串保留下来。如果不赋值，就丢弃。")])]),t._v(" "),s("h4",{attrs:{id:"_2-高级替换-根据不同的敏感词-选择替换成不同的新值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-高级替换-根据不同的敏感词-选择替换成不同的新值"}},[t._v("#")]),t._v(" 2. 高级替换: 根据不同的敏感词，选择替换成不同的新值")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("正则")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第二个参数变成了一个匿名函数")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("kword")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//要求1: 必须有一个形参")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//要求2: 必须返回修改后的新值")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" kword"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("原理:"),s("br"),t._v("\nreplace会拿着正则表达式取str中找每个符合条件的敏感词。"),s("br"),t._v("\n每找到一个，就自动调用匿名函数。并自动将本次找到的敏感词传给形参。"),s("br"),t._v("\n在匿名函数内，加工形参，得到新值，被return返回到匿名函数外部。"),s("br"),t._v("\n返回的新值再被replace替换到str中当前位置。"),s("br"),t._v('\n衍生操作: 删除敏感词，其实即使替换为""'),s("br"),t._v('\nstr=str.replace(/正则/ig,"")')]),t._v(" "),s("h3",{attrs:{id:"切割"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#切割"}},[t._v("#")]),t._v(" 切割")]),t._v(" "),s("p",[t._v("什么是：按字符串中一个指定的切割符，将一个字符串，切成多段子字符串"),s("br"),t._v("\n何时: 将一个字符串的内容转为数组"),s("br"),t._v("\n如何: 2种:")]),t._v(" "),s("h4",{attrs:{id:"_1-简单切割-分隔符是固定的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单切割-分隔符是固定的"}},[t._v("#")]),t._v(" 1. 简单切割: 分隔符是固定的")]),t._v(" "),s("p",[t._v('var arr=str.split("分隔符")')]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("强调")]),t._v(" "),s("p",[t._v("切割后的数组内容中，不包含切割符")])]),t._v(" "),s("h4",{attrs:{id:"_2-复杂切割-分隔符不是固定的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-复杂切割-分隔符不是固定的"}},[t._v("#")]),t._v(" 2. 复杂切割: 分隔符不是固定的")]),t._v(" "),s("p",[t._v("var arr=str.split(/正则/)"),s("br"),t._v("\n执行时，会将一切符合正则的字符都当做分隔符")]),t._v(" "),s("h2",{attrs:{id:"regexp对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp对象"}},[t._v("#")]),t._v(" RegExp对象")]),t._v(" "),s("h3",{attrs:{id:"什么是-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-2"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("专门保存一条正则表达式，并提供用正则表达式执行验证和查找功能的函数")]),t._v(" "),s("h3",{attrs:{id:"何时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时"}},[t._v("#")]),t._v(" 何时")]),t._v(" "),s("p",[t._v("今后只要在程序中使用正则表达式，就都需要创建正则表达式对象来保存一条正则表达式。")]),t._v(" "),s("h3",{attrs:{id:"如何"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何"}},[t._v("#")]),t._v(" 如何")]),t._v(" "),s("p",[t._v("创建: 2种:")]),t._v(" "),s("h4",{attrs:{id:"_1-用双-var-reg-正则-ig"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-用双-var-reg-正则-ig"}},[t._v("#")]),t._v(" 1. 用双/： var reg=/正则/ig")]),t._v(" "),s("p",[t._v("何时: 如果正则表达式是固定不变的，则首选着第一种方式快速创建。"),s("br"),t._v("\n问题: 如果正则不是固定的，需要根据其他数据动态生成，则//之间不能写js表达式。因为//之间是正则的地盘。")]),t._v(" "),s("h4",{attrs:{id:"_2-用new-var-reg-new-regexp-正则-ig"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-用new-var-reg-new-regexp-正则-ig"}},[t._v("#")]),t._v(' 2. 用new: var reg=new RegExp("正则","ig")')]),t._v(" "),s("p",[t._v('强调: 用""，就不用加/了'),s("br"),t._v("\n何时: 如果正则表达式不是固定的，需要根据其他变量或数组动态拼接生成，就必须用new RegExp()"),s("br"),t._v("\n因为new RegExp的参数是字符串。在js中可以有无数种方法拼接处任意自己想要的字符串后，再给RegEx")]),t._v(" "),s("h3",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("h4",{attrs:{id:"_1-验证字符串格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-验证字符串格式"}},[t._v("#")]),t._v(" 1. 验证字符串格式")]),t._v(" "),s("p",[t._v("var bool=reg.test(str)\n用正则表达式reg去检查字符串str是否符合正则的格式要求。返回bool值。所以，reg.test()可直接当做判断条件。"),s("br"),t._v("\n坑: 其实test默认只要在字符串中找到符合条件的内容，就返回true。不要求字符串和正则从头到尾完整匹配。"),s("br"),t._v("\n解决: 今后凡是验证，必须都要前加^，后")]),t._v(" "),s("h4",{attrs:{id:"_2-第四种查找方式-即找每个敏感词的内容-又找每个敏感词的位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-第四种查找方式-即找每个敏感词的内容-又找每个敏感词的位置"}},[t._v("#")]),t._v(" 2. 第四种查找方式: 即找每个敏感词的内容，又找每个敏感词的位置")]),t._v(" "),s("p",[t._v("var arr=reg.exec(str)"),s("br"),t._v("\n在字符串str中查找下一个符合正则表达式reg要求的敏感词的内容和位置。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("强调")]),t._v(" "),s("ol",[s("li",[t._v("执行一次，只能找一个敏感词")]),t._v(" "),s("li",[t._v("要想找所有，必须加g")]),t._v(" "),s("li",[t._v("返回值: 同match不加g的情况")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("Tables")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Are")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Cool")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("index")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("敏感词")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("敏感词的位置i")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("vs match:")]),t._v(" "),s("p",[t._v("match，无论反复调用多少次都只能找第一个敏感词。"),s("br"),t._v("\nexec，如果反复调用，会自动向后查找，每次都找下一个敏感词。如果找不到，就返回null")])]),t._v(" "),s("h2",{attrs:{id:"function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[t._v("#")]),t._v(" Function")]),t._v(" "),s("h3",{attrs:{id:"什么是-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-3"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("程序中封装一段可重复执行的代码段的程序结构，再起一个名字。")]),t._v(" "),s("h3",{attrs:{id:"何时-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时-2"}},[t._v("#")]),t._v(" 何时")]),t._v(" "),s("p",[t._v("只要一段代码可能多次重复使用时，都要封装在函数里。")]),t._v(" "),s("h3",{attrs:{id:"如何-2步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何-2步"}},[t._v("#")]),t._v(" 如何-2步")]),t._v(" "),s("h4",{attrs:{id:"_1-创建函数-3种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建函数-3种"}},[t._v("#")]),t._v(" 1. 创建函数：3种")]),t._v(" "),s("h5",{attrs:{id:"_1-声明方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-声明方式"}},[t._v("#")]),t._v(" 1. 声明方式:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("函数名")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("形参列表")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n函数体"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 返回值"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("——这个整体称为一个函数声明\n")])])]),s("p",[t._v("强调:")]),t._v(" "),s("ol",[s("li",[t._v("function 在程序中是一个动词，每执行一次function 就会重新创建一个新函数。")]),t._v(" "),s("li",[t._v("形参:"),s("br"),t._v("\n什么是: 专门接收传入函数的数据的变量——函数内部专用的局部变量"),s("br"),t._v("\n为什么: 函数体中，有些数据是不能写死的，是需要根据外部情况，动态变化的。"),s("br"),t._v("\n何时: 只要函数中有依赖于外部动态变化的值，就都要用形参来获得。")]),t._v(" "),s("li",[t._v("返回值:"),s("br"),t._v("\n什么是: 函数内部的执行结果，被抛出到函数外部，让外部可以继续使用函数的处理结果。"),s("br"),t._v("\n为什么: 因为函数外部的调用者需要获得函数的执行结果。"),s("br"),t._v("\n何时: 只要函数外部的调用者需要获得函数的执行结果，继续后续操作时，就要用返回值。"),s("br"),t._v("\njs最核心原理之一:"),s("br"),t._v("\n函数其实也是一个对象"),s("br"),t._v("\n函数名其实只是一个普通的变量"),s("br"),t._v("\n函数名变量中保存着函数对象的地址值，通过内存地址，引用着函数对象。"),s("br"),t._v("\n当调用时，js引擎先找到函数名变量，再通过函数名变量中的地址，找到函数对象，再执行函数对象中保存的函数体。"),s("br"),t._v("\n声明方式创建函数的问题: 会被声明提前hoist"),s("br"),t._v("\n什么是: 在程序开始执行前，程序先找到所有var声明的变量和function声明的函数，提前到当前作用域的顶部集中创建。赋值留在原地。再开始顺序执行剩下程序。"),s("br"),t._v("\n声明提前是js广受诟病的缺陷")])]),t._v(" "),s("h5",{attrs:{id:"_2-用赋值方式创建函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-用赋值方式创建函数"}},[t._v("#")]),t._v(" 2. 用赋值方式创建函数:")]),t._v(" "),s("p",[t._v("优点：函数定义不会被声明提前")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("var函数名")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("形参列表")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t函数体"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 返回值"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("结果: 除了不会被声明提前之外，其余用法和普通函数定义完全一样！")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("揭示了一个js最核心的原理之一")]),t._v(" "),s("p",[t._v("函数名其实就是一个普通的变量"),s("br"),t._v("\n函数体其实是一个对象")])]),t._v(" "),s("h5",{attrs:{id:"_3-用new来创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-用new来创建"}},[t._v("#")]),t._v(" 3. 用new来创建:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" 函数名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"形参1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"形参2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"函数体"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2-调用函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-调用函数"}},[t._v("#")]),t._v(" 2. 调用函数：")]),t._v(" "),s("p",[t._v("var 变量=函数名(实参值列表)"),s("br"),t._v("\n原理: 通过函数名找到当前函数，执行函数体中的代码，将实参值列表中的数据，对位赋值给形参变量在函数内部使用。如果有返回值，则通过等号赋值给左边的变量。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("强调")]),t._v(" "),s("p",[t._v("一个函数，如果只是定义，而没有加()调用，则不会执行函数的内容。即使函数内容写错！也不报错！")])]),t._v(" "),s("h3",{attrs:{id:"重载-overload"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重载-overload"}},[t._v("#")]),t._v(" 重载(overload)")]),t._v(" "),s("h4",{attrs:{id:"什么是-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-4"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("相同函数名，不同形参列表的多个函数，在调用时可自动根据传入实参列表的不同，自动选择匹配的函数版本调用。")]),t._v(" "),s("h4",{attrs:{id:"为什么-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-2"}},[t._v("#")]),t._v(" 为什么")]),t._v(" "),s("p",[t._v("减少函数的个数，便于调用者调用和记忆")]),t._v(" "),s("h4",{attrs:{id:"何时-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时-3"}},[t._v("#")]),t._v(" 何时")]),t._v(" "),s("p",[t._v("一件事，可能根据不同的实参值，执行不同的操作时。")]),t._v(" "),s("h4",{attrs:{id:"如何-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何-2"}},[t._v("#")]),t._v(" 如何")]),t._v(" "),s("p",[t._v("其它语言:")]),t._v(" "),s("ol",[s("li",[t._v("先定义多个相同函数名，不同形参列表的函数")]),t._v(" "),s("li",[t._v("用统一的函数名，调用函数，传入实参列表。"),s("br"),t._v("\n结果: 其它语言可自动根据传入的实参值列表不同，自动匹配对应的函数，调用。"),s("br"),t._v("\n问题: js不支持多个同名函数同时存在！所有，js不支持其它语言那种重载的方式。"),s("br"),t._v("\n其实，js支持重载效果，但是需要变通实现。"),s("br"),t._v("\n如何:")]),t._v(" "),s("li",[t._v("既然多个函数不让定义，就定义1个！这一个函数中要包含所有情况的定义。")]),t._v(" "),s("li",[t._v("用arguments对象自动接住函数外部传入的实参值列表。并判断arguments中的实参个数或实参值"),s("br"),t._v("\narguments: 每个函数中自带的，专门自动接收所有传入函数的实参值列表的，类数组对象。"),s("br"),t._v("\n每个函数中自带: 不用我们手动创建"),s("br"),t._v("\n接收所用传入实参值得列表——用途"),s("br"),t._v("\n类数组对象: 长得像数组的对象")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("vs 数组")]),t._v(" "),s("p",[t._v("相同: 1. 下标, 2. length"),s("br"),t._v("\n不同: 不是同一种类型。不是一家人。类数组对象不能使用数组家的函数。"),s("br"),t._v("\n当函数执行时，即使不定义形参，也可以随意传入任意多的实参值。不会报错。因为内部都有arguments对象接住所有的实参值。")])]),t._v(" "),s("h3",{attrs:{id:"匿名函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数"}},[t._v("#")]),t._v(" 匿名函数")]),t._v(" "),s("h4",{attrs:{id:"什么是-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-5"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("定义函数是不定义函数名的函数")]),t._v(" "),s("h4",{attrs:{id:"如何-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何-3"}},[t._v("#")]),t._v(" 如何")]),t._v(" "),s("h4",{attrs:{id:"_1-回调函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-回调函数"}},[t._v("#")]),t._v(" 1. 回调函数：")]),t._v(" "),s("p",[t._v("什么是: 自己定义的函数，自己不执行，而是交给别的函数去自动调用执行。什么时候执行，执行几次，与咱们无关。"),s("br"),t._v("\n为什么: 节约内存，用完一次后，自动释放！"),s("br"),t._v("\n比如:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ms"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("正则")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("kword")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 新值\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2-自调"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-自调"}},[t._v("#")]),t._v(" 2. 自调:")]),t._v(" "),s("p",[t._v("什么是: 定义完函数，立刻调用自己"),s("br"),t._v("\n为什么: 防止全局污染"),s("br"),t._v("\n全局污染: 保存在全局的变量，可能被任何位置篡改。——将来禁止使用全局变量"),s("br"),t._v("\n何时: 今后所有js代码，都应该包裹在匿名函数自调中。而避免使用全局变量。造成全局污染"),s("br"),t._v("\n如何:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t函数体\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("调用\n")])])]),s("p",[t._v("说明: 加上匿名函数自调的代码，和不加匿名函数自调的代码功能，完全一样。只不过避免了使用全局变量，将来造成全局污染。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("强调")]),t._v(" "),s("p",[t._v("匿名函数自调之后，必须分号结束")])]),t._v(" "),s("h3",{attrs:{id:"作用域-scope-和作用域链-scope-chain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域-scope-和作用域链-scope-chain"}},[t._v("#")]),t._v(" 作用域(scope)和作用域链(scope chain)")]),t._v(" "),s("h4",{attrs:{id:"什么是-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-6"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("一个变量的可用范围")]),t._v(" "),s("h4",{attrs:{id:"为什么-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-3"}},[t._v("#")]),t._v(" 为什么")]),t._v(" "),s("p",[t._v("避免不同范围的数据之间互相干扰！"),s("br"),t._v("\n包括: 只有2级:")]),t._v(" "),s("h4",{attrs:{id:"_1-全局作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局作用域"}},[t._v("#")]),t._v(" 1. 全局作用域:")]),t._v(" "),s("p",[t._v("什么是: 在程序任何位置都可以访问到的，其实就是window对象。"),s("br"),t._v("\n何时: 如果一个变量可能夸多个函数反复使用，都要定义在全局。但是，今后，仍然禁止使用全局变量。"),s("br"),t._v("\n如何: 凡是不属于任何函数或对象内的，独立的变量和函数，都是全局变量和全局函数。")]),t._v(" "),s("h4",{attrs:{id:"_2-函数作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数作用域"}},[t._v("#")]),t._v(" 2. 函数作用域:")]),t._v(" "),s("h4",{attrs:{id:"什么是-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-7"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("仅在当前函数内可用的范围")]),t._v(" "),s("h4",{attrs:{id:"何时-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时-4"}},[t._v("#")]),t._v(" 何时")]),t._v(" "),s("p",[t._v("绝大多数情况下，数据都是仅在当前函数内使用就够了。所以，绝大多数情况下优先用局部变量。")]),t._v(" "),s("h4",{attrs:{id:"如何-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何-4"}},[t._v("#")]),t._v(" 如何")]),t._v(" "),s("p",[t._v("2种:"),s("br"),t._v("\na. 在函数内var出的变量和function创建的内层函数，都是仅局部使用的。出了函数不可用"),s("br"),t._v("\nb. 函数的形参变量，虽然没有var，但是也是在调用函数时临时创建的局部变量。仅函数内可用")]),t._v(" "),s("h4",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),s("p",[t._v("其实函数作用域，也是一个临时对象"),s("br"),t._v("\n如果一个函数仅定义，不调用，是没有临时的函数作用域对象的。也没有局部变量。"),s("br"),t._v("\n当调用一个函数时，才临时创建当前函数的作用域对象。并在作用域对象中创建局部变量")]),t._v(" "),s("h4",{attrs:{id:"调用过程中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用过程中"}},[t._v("#")]),t._v(" 调用过程中")]),t._v(" "),s("p",[t._v("优先使用局部变量，局部没有才去全局找。")]),t._v(" "),s("h4",{attrs:{id:"函数调用后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数调用后"}},[t._v("#")]),t._v(" 函数调用后")]),t._v(" "),s("p",[t._v("临时的函数作用域对象就没人要了。就自动释放了。同时，局部变量一同释放。"),s("br"),t._v("\n所以，局部变量，不可重"),s("br"),t._v("\njs中没有局部(块级)作用域:"),s("br"),t._v("\njs中不是所有{}都是作用域的"),s("br"),t._v("\n比如:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])])]),s("p",[t._v("都不是作用域，这些{}内部的变量出了{}依然可用\n比如:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \tsum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("再比如:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bbb"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\npool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("vs java是三级作用域")]),t._v(" "),s("p",[t._v("多了局部(块级)作用域")])]),t._v(" "),s("p",[t._v("在java中:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这些大括号都是作用域\n在java中，这些大括号里的变量出了{}，都不能用了。\n比如：以上两种写法，在java中都是错误的！\n应该改为:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \t\tsum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\n")])])]),s("p",[t._v("再比如：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tsql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tsql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bbb"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\npool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),s("h4",{attrs:{id:"什么是-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-8"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("由多级作用域对象，逐级引用，形成的链式结构")]),t._v(" "),s("h4",{attrs:{id:"为什么-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-4"}},[t._v("#")]),t._v(" 为什么")]),t._v(" "),s("p",[t._v("函数执行时，难免自己缺少一些变量，需要从全局的公共区域查找。")]),t._v(" "),s("h4",{attrs:{id:"如何-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何-5"}},[t._v("#")]),t._v(" 如何")]),t._v(" "),s("ol",[s("li",[t._v('每个函数其实都有一个"好友列表"，记录着自己将来可以找谁借钱！')]),t._v(" "),s("li",[t._v("函数不调用时，好友列表中，只有window，所有函数都将window当做备胎")]),t._v(" "),s("li",[t._v("当函数调用时，临时创建了自己的函数作用域。会将临时的函数作用域加入好友列表中，window之前。")]),t._v(" "),s("li",[t._v('当函数中用到变量时，按"好友列表"的顺序，在作用域链中查找变量使用。'),s("br"),t._v("\n使用顺序:"),s("br"),t._v("\n先在局部找。"),s("br"),t._v("\n局部没有，才去全局找。")])]),t._v(" "),s("h3",{attrs:{id:"闭包-closure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包-closure"}},[t._v("#")]),t._v(" 闭包: closure")]),t._v(" "),s("h4",{attrs:{id:"什么是-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-9"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("即重用一个变量，又保护变量不被篡改的一种机制。")]),t._v(" "),s("h4",{attrs:{id:"为什么-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-5"}},[t._v("#")]),t._v(" 为什么")]),t._v(" "),s("p",[t._v("全局变量，还是局部变量都有不可兼得的优缺点:"),s("br"),t._v("\n全局变量: 优: 可重用， 缺: 易被污染"),s("br"),t._v("\n局部变量: 优: 不会被污染， 缺: 不可重用")]),t._v(" "),s("h4",{attrs:{id:"何时-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时-5"}},[t._v("#")]),t._v(" 何时")]),t._v(" "),s("p",[t._v("如果希望给一个函数保存一个专属的可重用的变量时，都要用闭包")]),t._v(" "),s("h4",{attrs:{id:"如何-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何-6"}},[t._v("#")]),t._v(" 如何")]),t._v(" "),s("p",[t._v("a. 用外层函数包裹受保护的变量和内层函数对象"),s("br"),t._v("\nb. 外层函数将内层函数的对象返回到外层函数外部"),s("br"),t._v("\nc. 使用者需要调用外层函数，获得返回的内层函数，再起一个名字。")]),t._v(" "),s("h4",{attrs:{id:"结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结果"}},[t._v("#")]),t._v(" 结果")]),t._v(" "),s("p",[t._v("受保护的变量，不会被全局的语句修改，且被当前内层函数反复使用了。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("笔试: 闭包是如何形成的？")]),t._v(" "),s("p",[t._v("外层函数调用后，外层函数的作用域被内层函数引用着，无法释放！"),s("br"),t._v("\n缺点: 比普通的函数多占用一块内存空间（父母函数的局部变量）"),s("br"),t._v("\n解决: 一旦闭包不再使用，应该立刻释放！"),s("br"),t._v("\n将保存内层函数的变量赋值为null，就释放了内层函数对象，同时释放了父母的函数作用域。"),s("br"),t._v("\n比喻: 简单描述什么是闭包:"),s("br"),t._v("\n父母生了一个孩子"),s("br"),t._v("\n给孩子包了一个红包，红包装在孩子兜里，只能孩子用。")])]),t._v(" "),s("h2",{attrs:{id:"面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),s("h3",{attrs:{id:"什么是对象-2个概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是对象-2个概念"}},[t._v("#")]),t._v(" 什么是对象——2个概念")]),t._v(" "),s("h4",{attrs:{id:"用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途")]),t._v(" "),s("p",[t._v("程序中描述现实中一个具体实物的属性和功能的程序结构")]),t._v(" "),s("h4",{attrs:{id:"本质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本质"}},[t._v("#")]),t._v(" 本质")]),t._v(" "),s("p",[t._v("内存中一个块集中存储一个实物的多个属性和功能的存储空间。")]),t._v(" "),s("h3",{attrs:{id:"什么是面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是面向对象"}},[t._v("#")]),t._v(" 什么是面向对象")]),t._v(" "),s("p",[t._v("将来的程序都是先用对象描述出不同的事物的属性和功能，然后再按需访问对象中的属性和功能。")]),t._v(" "),s("h4",{attrs:{id:"为什么-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-6"}},[t._v("#")]),t._v(" 为什么")]),t._v(" "),s("p",[t._v("便于大量数据的使用和维护")]),t._v(" "),s("h4",{attrs:{id:"何时-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时-6"}},[t._v("#")]),t._v(" 何时")]),t._v(" "),s("p",[t._v("今后所有程序都是用面向对象。")]),t._v(" "),s("h4",{attrs:{id:"如何-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何-7"}},[t._v("#")]),t._v(" 如何")]),t._v(" "),s("p",[t._v("面向对象三大特点: 封装，继承，多态")]),t._v(" "),s("h4",{attrs:{id:"_1-封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-封装"}},[t._v("#")]),t._v(" 1. 封装:")]),t._v(" "),s("h5",{attrs:{id:"什么是-10"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-10"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("将一个事物的属性和功能集中定义在一个对象结构中——其实就创建一个对象")]),t._v(" "),s("h5",{attrs:{id:"为什么-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-7"}},[t._v("#")]),t._v(" 为什么")]),t._v(" "),s("p",[t._v("都是为了便于大量数据的管理和使用")]),t._v(" "),s("h5",{attrs:{id:"何时-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时-7"}},[t._v("#")]),t._v(" 何时")]),t._v(" "),s("p",[t._v("今后只要使用面向对象的方式编程，第一步都是创建对象。然后才是按需使用对象中的属性和功能。")]),t._v(" "),s("h5",{attrs:{id:"如何-3种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何-3种"}},[t._v("#")]),t._v(" 如何——3种")]),t._v(" "),s("h5",{attrs:{id:"_1-用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-用"}},[t._v("#")]),t._v(" 1. 用{}")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" 对象名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t属性名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 属性值"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t功能"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("方法")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("何时: 在创建对象时，已经知道对象中将要包含什么内容。"),s("br"),t._v("\n比如:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" lilei"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \tsname"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Li Lei"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  \tsage"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  \t"),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("intr")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("I'm Li Lei, I'm 11")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在内存中："),s("br"),t._v(" "),s("img",{attrs:{src:t.$withBase("../nc.png"),alt:"dock"}})]),t._v(" "),s("h5",{attrs:{id:"问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),s("p",[t._v("对象的属性值发生变化，而方法中的内容不会跟着变化。")]),t._v(" "),s("h5",{attrs:{id:"原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[t._v("#")]),t._v(" 原因")]),t._v(" "),s("p",[t._v("方法中的输出内容是写死的")]),t._v(" "),s("h5",{attrs:{id:"错误的解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#错误的解决方案"}},[t._v("#")]),t._v(" 错误的解决方案")]),t._v(" "),s("p",[t._v("将写死的值，改为属性名，在运行时动态获得属性值。")]),t._v(" "),s("h5",{attrs:{id:"原因-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因-2"}},[t._v("#")]),t._v(" 原因")]),t._v(" "),s("p",[t._v("不带任何前缀的变量，默认只能在自己的函数作用域和window之间找。无权在对象里找。因为所有对象都不是作用域。")]),t._v(" "),s("h5",{attrs:{id:"不好的解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不好的解决方案"}},[t._v("#")]),t._v(" 不好的解决方案")]),t._v(" "),s("p",[t._v("在属性名前加固定的对象名。")]),t._v(" "),s("h5",{attrs:{id:"问题-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题-2"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),s("p",[t._v("对象名其实就是一个变量名，很可能被修改。一旦对象名修改，方法内忘记修改，立刻就报错！——紧耦合")]),t._v(" "),s("h5",{attrs:{id:"最优的解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最优的解决方案"}},[t._v("#")]),t._v(" 最优的解决方案")]),t._v(" "),s("p",[t._v("使用this关键字")]),t._v(" "),s("h5",{attrs:{id:"什么是-11"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-11"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("每个函数作用域中自动添加的，自动引用正在调用函数的.前的那个对象的 关键词"),s("br"),t._v(" "),s("img",{attrs:{src:t.$withBase("../this.png"),alt:"dock"}})]),t._v(" "),s("h5",{attrs:{id:"何时-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时-8"}},[t._v("#")]),t._v(" 何时")]),t._v(" "),s("p",[t._v("今后只要对象自己的方法，想使用自己的属性，也必须加this.前缀。")]),t._v(" "),s("h5",{attrs:{id:"笔试时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#笔试时"}},[t._v("#")]),t._v(" 笔试时")]),t._v(" "),s("p",[t._v("判断this一定不要看定义在哪儿。必须看调用时，.前是谁！")]),t._v(" "),s("h5",{attrs:{id:"比如"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比如"}},[t._v("#")]),t._v(" 比如")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fun"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("lilei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("intr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("p",[t._v("lilei将自己的intr函数的地址值给了全局变量fun。从此fun和lilei.intr共同引用同一个函数."),s("br"),t._v("\nfun();"),s("br"),t._v("\n结果输出I'm undefined, I'm undefined。因为fun()调用时，前边没有. 。如果没有.的一切都会被自动加上window.， 所以，fun()调用时this->window。因为window中没有sname和sage属性，所以，返回undefined")]),t._v(" "),s("h5",{attrs:{id:"访问对象的成员"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问对象的成员"}},[t._v("#")]),t._v(" 访问对象的成员")]),t._v(" "),s("p",[t._v("成员=属性+方法")]),t._v(" "),s("h5",{attrs:{id:"访问属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问属性"}},[t._v("#")]),t._v(" 访问属性")]),t._v(" "),s("p",[t._v("属性其实就是保存在对象内部的变量而已。用法和变量完全一样。只不过查找时，要先找到对象，再用.运算符找到对象内的指定属性。")]),t._v(" "),s("h5",{attrs:{id:"lilei-sname-的调用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lilei-sname-的调用方法"}},[t._v("#")]),t._v(" lilei.sname 的调用方法")]),t._v(" "),s("p",[t._v("方法其实就是保存在对象内部的函数而已。用法和函数完全一样。只不过查找时，要先找到对象，再用.运算符找到对象内的指定方法，然后加()调用方法。"),s("br"),t._v("\nlilei.intr()")]),t._v(" "),s("h5",{attrs:{id:"_2-用new来创建-2步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-用new来创建-2步"}},[t._v("#")]),t._v(" 2. 用new来创建——2步")]),t._v(" "),s("h5",{attrs:{id:"_1-先用new-创建空对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-先用new-创建空对象"}},[t._v("#")]),t._v(" 1. 先用new 创建空对象:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("p",[t._v("new可省略, ()可省略"),s("br"),t._v("\n不能同时省略"),s("br"),t._v("\n其实就可以简写为")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),s("h5",{attrs:{id:"_2-向空对象中添加成员"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-向空对象中添加成员"}},[t._v("#")]),t._v(" 2. 向空对象中添加成员:")]),t._v(" "),s("p",[t._v("js中想向一个对象中添加新成员，只有一个野蛮的办法，就是强行赋值！")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("新属性"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("值  \nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("新方法")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n")])])]),s("p",[t._v("何时: 如果创建对象时，暂时不知道对象中的成员具体内容时。"),s("br"),t._v("\n揭示: 所有对象底层其实都是关联数组！")]),t._v(" "),s("ol",[s("li",[t._v("都是名值对儿的集合。")]),t._v(" "),s("li",[t._v("都可用下标或.的方式访问每个成员"),s("br"),t._v("\n翻译"),s("br"),t._v("\n比如:")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("ym"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"math"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ym"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("math  \nlilei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sname"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  lilei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sname \n")])])]),s("p",[t._v("如果访问成员时:"),s("br"),t._v('\n成员名是写死的，即可用.，又可用["成员名"]'),s("br"),t._v('\n成员名不是固定的，可能来自于变量或拼接，则必须用[ 变量/表达式 ]，且不要加""'),s("br"),t._v("\n3. 都可用for in遍历:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" 对象"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("关联数组"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \nkey自动获得当前属性名  \n数组"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 获得当前属性值  \n对象"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 获得当前属性值  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("强调")]),t._v(" "),s("p",[t._v('[key]一定不要加引号，因为key是变量，从来没有将变量加在""中的写法！一个变量如果加上""，就不能再变化了！')])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("访问数组或对象中不存在的位置都不会报错！而是返回undefined")]),t._v(" "),s("li",[t._v("强行给数组或对象中不存在的位置赋值，不会报错！而是自动添加该成员。"),s("br"),t._v("\n前两种方式，一次只能创建一个对象。如果反复创建多个相同结构的对象时，代码会很繁琐！")])]),t._v(" "),s("h5",{attrs:{id:"_3-用构造函数来创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-用构造函数来创建"}},[t._v("#")]),t._v(" 3. 用构造函数来创建:")]),t._v(" "),s("p",[t._v("什么是: 2个概念")]),t._v(" "),s("ol",[s("li",[t._v("专门描述一类对象的统一结构的函数")]),t._v(" "),s("li",[t._v("专门用于创建同一类型多个对象的特殊函数"),s("br"),t._v("\n何时: 只要反复创建多个相同结构的对象时，都要用构造函数来创建\n如何: 2步:\na. 定义构造函数，其中描述同一类型所有对象的统一结构。不需要指定具体属性值。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("类型名")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("形参列表")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("新属性"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("形参"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("新属性"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("形参"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("新方法")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("b. 调用构造函数，创建该类型的一具体个对象实例。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("类型名")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("属性值列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("↑\n构造函数名\nnew的原理: new干了四件事:")]),t._v(" "),s("ol",[s("li",[t._v("新建一个空对象")]),t._v(" "),s("li",[t._v("自动设置当前对象继承构造函数的老公——原型对象爸爸")]),t._v(" "),s("li",[t._v("用新对象去调用构造函数。会自动将构造函数中所有this都指向新对象。然后，再用强行赋值的方式，给新对象添加新属性")]),t._v(" "),s("li",[t._v("返回新对象的地址给变量保存起来。\n构造函数的问题: 虽然重用了结构代码，但是反复调用了function，创建了多个方法的副本。浪费了内存。")])]),t._v(" "),s("h4",{attrs:{id:"_2-继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-继承"}},[t._v("#")]),t._v(" 2. 继承:")]),t._v(" "),s("h5",{attrs:{id:"什么是-12"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-12"}},[t._v("#")]),t._v(" 什么是")]),t._v(" "),s("p",[t._v("父对象的成员，子对象无需重复创建，就可直接使用！")]),t._v(" "),s("h5",{attrs:{id:"为什么-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-8"}},[t._v("#")]),t._v(" 为什么")]),t._v(" "),s("p",[t._v("代码重用和节约内存！")]),t._v(" "),s("h5",{attrs:{id:"何时-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时-9"}},[t._v("#")]),t._v(" 何时")]),t._v(" "),s("p",[t._v("多个子对象，都拥有相同的方法定义时。就应该找一个共同的父对象。将相同的方法定义，保存在父对象中一份。所有孩子自动继承共用。")]),t._v(" "),s("h5",{attrs:{id:"如何-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何-8"}},[t._v("#")]),t._v(" 如何")]),t._v(" "),s("p",[t._v("js中实现继承都是用原型对象实现的。")]),t._v(" "),s("h5",{attrs:{id:"什么是原型对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型对象"}},[t._v("#")]),t._v(" 什么是原型对象")]),t._v(" "),s("p",[t._v("集中保存同一类型下所有子对象共有成员的父对象\n"),s("img",{attrs:{src:t.$withBase("../prototype.png"),alt:"dock"}})]),t._v(" "),s("h5",{attrs:{id:"何时-10"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时-10"}},[t._v("#")]),t._v(" 何时")]),t._v(" "),s("p",[t._v("只要当前类型下的所有子对象都需要一批共有的成员时，就需要在原型对象中同一定义。")]),t._v(" "),s("h5",{attrs:{id:"如何-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何-9"}},[t._v("#")]),t._v(" 如何")]),t._v(" "),s("ol",[s("li",[t._v("创建: 买一赠一，不用创建"),s("br"),t._v("\njs中买妈妈赠个爹！"),s("br"),t._v("\n构造函数妈妈的prototype属性引用着自己的老公——原型对象爸爸。原型对象中的constructor属性引用着自己的老婆——构造函数妈妈")]),t._v(" "),s("li",[t._v("何时继承: 不用自己设置！"),s("br"),t._v("\nnew的第2步: 自动设置当前对象继承构造函数的老公——原型对象爸爸")]),t._v(" "),s("li",[t._v("我们做什么？决定把什么东西放到原型对象中，让所有子对象共用。"),s("br"),t._v("\n今后只要多个子对象共用的属性值和方法定义，都不要放在构造函数里。应该放在原型对象中"),s("br"),t._v("\n如何: 强行赋值:\n构造函数.prototype.新成员=新值\n"),s("img",{attrs:{src:t.$withBase("../pro.png"),alt:"dock"}})])])],1)}),[],!1,null,null,null);a.default=n.exports}}]);